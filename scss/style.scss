$cell-size: 35px;
$row: 8; // Ê®™ÂπÖ
$col: 8; // Á∏¶ÂπÖ
$mineCount: 5; // Âú∞Èõ∑„ÅÆÊï∞

$minePos: ();

// base style
html, body {
  height: 100%;
}

input {
  display: none;
}

.mine_sweeper {
  height: 100%;
  padding: 30px;
  position: relative;

  h1 {
    text-align: center;
  }
}

// Èñã„ÅèÁ®ÆÂà•„Ç≥„É≥„Éà„É≠„Éº„É´
.mode_control {
  text-align: center;

  label {
    margin: 3px;
    cursor: pointer;
    span {
      font-size: 15px;
      color: #BBB;
    }
  }

  #normal-mode:checked ~ & .normal_mode,
  #flag-mode:checked ~ & .flag_mode {
    span {
      color: black;
      font-size: 20px;
    }
  }
}

#normal-mode:checked ~ .field {
  .mark_as_opened {
    display: block;
  }
  .mark_as_flag {
    display: none;
  }
}

#flag-mode:checked ~ .field {
  .mark_as_opened {
    display: none;
  }
  .mark_as_flag {
    display: block;
  }
}

.field {
  display: flex;
  flex-wrap: wrap;
  margin: 10px auto;
  width: #{($cell-size + 2) * $col};

  .cell {
    position: relative;
    border: 1px solid #AAA;
    width: $cell-size;
    height: $cell-size;
    background-color: #CCC;

    label {
      display: block;
      width: 100%;
      height: 100%;
      cursor: pointer;
    }
  }
}

.game_over,
.game_clear {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.5);
  font-size: 2em;
  color: white;
  text-align: center;
}

// dynamic styling start!

@mixin open {
  background-color: #EEE;
  &::before {
    display: flex;
    height: 100%;
    justify-content: center;
    align-items: center;
  }
  .mark_as_opened {
    display: none;
  }
}

@for $i from 0 to $mineCount {
  $mine: 0;
  $continue: true;

  @while $continue != null {
    $mine: random($row * $col);
    $continue: index($minePos, $mine);
  }
  $minePos: append($minePos, $mine);
}

$areaOffsets: (
  (-$col, $col), // ‰∏ä‰∏ã
  (-$col - 1, -1, $col - 1), // Â∑¶ÂÅ¥
  (-$col + 1, +1, $col + 1), // Âè≥ÂÅ¥
);

// „Éï„Ç£„Éº„É´„Éâ„ÅÆÁØÑÂõ≤ÂÜÖ„ÅãÂà§ÂÆö
@function isValidPos($pos) {
  @return (
    $pos >= 0 and
    $pos < $row * $col
  );
}

// Âë®Ëæ∫Ôºò„Éû„Çπ„ÅÆ„Éù„Ç∏„Ç∑„Éß„É≥„ÇíÂèñÂæó
@function getNeighborIndex($center) {
  $wk: nth($areaOffsets, 1);
  @if $center % $col != 0 { // Â∑¶Á´Ø„ÅÆÂ†¥Âêà„Çπ„Ç≠„ÉÉ„Éó
    $wk: join($wk, nth($areaOffsets, 2));
  }
  @if $center % $col != $col - 1 { // Âè≥ÊÅ•„ÅÆÂ†¥Âêà„Çπ„Ç≠„ÉÉ„Éó
    $wk: join($wk, nth($areaOffsets, 3));
  }
  $ret: ();
  @each $offset in $wk {
    @if isValidPos($center + $offset) { // ÁØÑÂõ≤Â§ñ„ÅØÁúÅ„Åè
      $ret: append($ret, $center + $offset);
    }
  }
  @return $ret;
}

// „Åù„Åì„ÅåÂú∞Èõ∑„Åã„Å©„ÅÜ„Åã
@function isMine($pos) {
  @return index($minePos, $pos) != null;
}

// Âë®Âõ≤Ôºò„Éû„Çπ„ÅÆÂú∞Èõ∑„ÅÆÊï∞„ÇíËøîÂç¥
@function countMine($n) {
  $count: 0;
  @each $n in getNeighborIndex($n) {
    @if isMine($n) {
      $count: $count + 1;
    }
  }
  @return $count;
}

@function getLinks($center, $linked) {
  $neighber: getNeighborIndex($center);
  $tmp: $linked;

  @each $n in $neighber {
    @if index($tmp, $n) == null {
      $c: countMine($n);
      $tmp: append($tmp, $n);
      @if $c == 0 {
        $tmp: getLinks($n, $tmp);
      }
    }
  }
  @return $tmp;
}

$mineSelector: ();
@for $i from 0 to $col * $row {
  $mines: countMine($i);
  $isMine: isMine($i);
  .cell:nth-child(#{$i + 1}) {
    &::before {
      @if $isMine {
        $mineSelector: append($mineSelector, #{&}, 'comma');
      } @else {
        content: if($mines > 0, $mines + '', '');
      }
      display: none;
    }

    #input-#{$i}-flag:checked ~ .field & {
      &::before {
        content: "üö©";
        padding-left: 5px;
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        width: 100%;
        height: 100%;
        justify-content: center;
        align-items: center;
        pointer-events: none;
      }
      .mark_as_opened {
        display: none;
      }
    }
    #input-#{$i}-open:checked ~ .field & {
      @include open;
    }
  }

  @if not($isMine) and $mines == 0 {
    $selector: ();
    @each $p in getLinks($i, ()) {
      $selector: append($selector, "#input-#{$i}-open:checked ~ .field .cell:nth-child(#{$p + 1})");
    }
    #{join($selector, (), 'comma')} {
      @include open;
    }
    $debug: $selector;
  }
}

#{$mineSelector} {
  content: '‚ñ†';
}

// „Ç≤„Éº„É†„Ç™„Éº„Éê„ÉºÂà§ÂÆö
$selector: ();
@each $p in $minePos {
  #input-#{$p}-open:checked ~ .game_over {
    $selector: append($selector, #{&}, 'comma');
  }
}

#{$selector} {
  display: block;
}

$clearSelector: "input";
@for $i from 0 to $col * $row {
  $wk: "";
  @if isMine($i) {
    $wk: "#input-#{$i}-flag:checked";
  } @else {
    $wk: "#input-#{$i}-flag:not(:checked)";
  }
  $clearSelector: $clearSelector + ' ~ ' + $wk;
}

#{$clearSelector} ~ .game_clear {
  display: block;
}
